// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class MainWindowState;
class Telemetry;

// ===================================================================

class MainWindowState : public ::google::protobuf::Message {
 public:
  MainWindowState();
  virtual ~MainWindowState();

  MainWindowState(const MainWindowState& from);

  inline MainWindowState& operator=(const MainWindowState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainWindowState& default_instance();

  void Swap(MainWindowState* other);

  // implements Message ----------------------------------------------

  MainWindowState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainWindowState& from);
  void MergeFrom(const MainWindowState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double XCord = 1;
  inline bool has_xcord() const;
  inline void clear_xcord();
  static const int kXCordFieldNumber = 1;
  inline double xcord() const;
  inline void set_xcord(double value);

  // required double YCord = 2;
  inline bool has_ycord() const;
  inline void clear_ycord();
  static const int kYCordFieldNumber = 2;
  inline double ycord() const;
  inline void set_ycord(double value);

  // required double ZCord = 3;
  inline bool has_zcord() const;
  inline void clear_zcord();
  static const int kZCordFieldNumber = 3;
  inline double zcord() const;
  inline void set_zcord(double value);

  // required double ACord = 4;
  inline bool has_acord() const;
  inline void clear_acord();
  static const int kACordFieldNumber = 4;
  inline double acord() const;
  inline void set_acord(double value);

  // required double BCord = 5;
  inline bool has_bcord() const;
  inline void clear_bcord();
  static const int kBCordFieldNumber = 5;
  inline double bcord() const;
  inline void set_bcord(double value);

  // required double CCord = 6;
  inline bool has_ccord() const;
  inline void clear_ccord();
  static const int kCCordFieldNumber = 6;
  inline double ccord() const;
  inline void set_ccord(double value);

  // @@protoc_insertion_point(class_scope:MainWindowState)
 private:
  inline void set_has_xcord();
  inline void clear_has_xcord();
  inline void set_has_ycord();
  inline void clear_has_ycord();
  inline void set_has_zcord();
  inline void clear_has_zcord();
  inline void set_has_acord();
  inline void clear_has_acord();
  inline void set_has_bcord();
  inline void clear_has_bcord();
  inline void set_has_ccord();
  inline void clear_has_ccord();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xcord_;
  double ycord_;
  double zcord_;
  double acord_;
  double bcord_;
  double ccord_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MainWindowState* default_instance_;
};
// -------------------------------------------------------------------

class Telemetry : public ::google::protobuf::Message {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  void Swap(Telemetry* other);

  // implements Message ----------------------------------------------

  Telemetry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // optional .MainWindowState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::MainWindowState& state() const;
  inline ::MainWindowState* mutable_state();
  inline ::MainWindowState* release_state();
  inline void set_allocated_state(::MainWindowState* state);

  // @@protoc_insertion_point(class_scope:Telemetry)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MainWindowState* state_;
  ::google::protobuf::int32 seq_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Telemetry* default_instance_;
};
// ===================================================================


// ===================================================================

// MainWindowState

// required double XCord = 1;
inline bool MainWindowState::has_xcord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainWindowState::set_has_xcord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainWindowState::clear_has_xcord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainWindowState::clear_xcord() {
  xcord_ = 0;
  clear_has_xcord();
}
inline double MainWindowState::xcord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.XCord)
  return xcord_;
}
inline void MainWindowState::set_xcord(double value) {
  set_has_xcord();
  xcord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.XCord)
}

// required double YCord = 2;
inline bool MainWindowState::has_ycord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainWindowState::set_has_ycord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainWindowState::clear_has_ycord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainWindowState::clear_ycord() {
  ycord_ = 0;
  clear_has_ycord();
}
inline double MainWindowState::ycord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.YCord)
  return ycord_;
}
inline void MainWindowState::set_ycord(double value) {
  set_has_ycord();
  ycord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.YCord)
}

// required double ZCord = 3;
inline bool MainWindowState::has_zcord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MainWindowState::set_has_zcord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MainWindowState::clear_has_zcord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MainWindowState::clear_zcord() {
  zcord_ = 0;
  clear_has_zcord();
}
inline double MainWindowState::zcord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.ZCord)
  return zcord_;
}
inline void MainWindowState::set_zcord(double value) {
  set_has_zcord();
  zcord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.ZCord)
}

// required double ACord = 4;
inline bool MainWindowState::has_acord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MainWindowState::set_has_acord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MainWindowState::clear_has_acord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MainWindowState::clear_acord() {
  acord_ = 0;
  clear_has_acord();
}
inline double MainWindowState::acord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.ACord)
  return acord_;
}
inline void MainWindowState::set_acord(double value) {
  set_has_acord();
  acord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.ACord)
}

// required double BCord = 5;
inline bool MainWindowState::has_bcord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MainWindowState::set_has_bcord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MainWindowState::clear_has_bcord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MainWindowState::clear_bcord() {
  bcord_ = 0;
  clear_has_bcord();
}
inline double MainWindowState::bcord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.BCord)
  return bcord_;
}
inline void MainWindowState::set_bcord(double value) {
  set_has_bcord();
  bcord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.BCord)
}

// required double CCord = 6;
inline bool MainWindowState::has_ccord() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MainWindowState::set_has_ccord() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MainWindowState::clear_has_ccord() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MainWindowState::clear_ccord() {
  ccord_ = 0;
  clear_has_ccord();
}
inline double MainWindowState::ccord() const {
  // @@protoc_insertion_point(field_get:MainWindowState.CCord)
  return ccord_;
}
inline void MainWindowState::set_ccord(double value) {
  set_has_ccord();
  ccord_ = value;
  // @@protoc_insertion_point(field_set:MainWindowState.CCord)
}

// -------------------------------------------------------------------

// Telemetry

// required int32 seq = 1;
inline bool Telemetry::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Telemetry::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Telemetry::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Telemetry::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 Telemetry::seq() const {
  // @@protoc_insertion_point(field_get:Telemetry.seq)
  return seq_;
}
inline void Telemetry::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.seq)
}

// optional .MainWindowState state = 2;
inline bool Telemetry::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Telemetry::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Telemetry::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Telemetry::clear_state() {
  if (state_ != NULL) state_->::MainWindowState::Clear();
  clear_has_state();
}
inline const ::MainWindowState& Telemetry::state() const {
  // @@protoc_insertion_point(field_get:Telemetry.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::MainWindowState* Telemetry::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::MainWindowState;
  // @@protoc_insertion_point(field_mutable:Telemetry.state)
  return state_;
}
inline ::MainWindowState* Telemetry::release_state() {
  clear_has_state();
  ::MainWindowState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void Telemetry::set_allocated_state(::MainWindowState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:Telemetry.state)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
