// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MainWindowState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainWindowState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  MainWindowState_descriptor_ = file->message_type(0);
  static const int MainWindowState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, xcord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, ycord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, zcord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, acord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, bcord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, ccord_),
  };
  MainWindowState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainWindowState_descriptor_,
      MainWindowState::default_instance_,
      MainWindowState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainWindowState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainWindowState));
  Telemetry_descriptor_ = file->message_type(1);
  static const int Telemetry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, state_),
  };
  Telemetry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_descriptor_,
      Telemetry::default_instance_,
      Telemetry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainWindowState_descriptor_, &MainWindowState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_descriptor_, &Telemetry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete MainWindowState::default_instance_;
  delete MainWindowState_reflection_;
  delete Telemetry::default_instance_;
  delete Telemetry_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"k\n\017MainWindowState\022\r\n\005XC"
    "ord\030\001 \002(\001\022\r\n\005YCord\030\002 \002(\001\022\r\n\005ZCord\030\003 \002(\001\022"
    "\r\n\005ACord\030\004 \002(\001\022\r\n\005BCord\030\005 \002(\001\022\r\n\005CCord\030\006"
    " \002(\001\"9\n\tTelemetry\022\013\n\003seq\030\001 \002(\005\022\037\n\005state\030"
    "\002 \001(\0132\020.MainWindowState", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  MainWindowState::default_instance_ = new MainWindowState();
  Telemetry::default_instance_ = new Telemetry();
  MainWindowState::default_instance_->InitAsDefaultInstance();
  Telemetry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MainWindowState::kXCordFieldNumber;
const int MainWindowState::kYCordFieldNumber;
const int MainWindowState::kZCordFieldNumber;
const int MainWindowState::kACordFieldNumber;
const int MainWindowState::kBCordFieldNumber;
const int MainWindowState::kCCordFieldNumber;
#endif  // !_MSC_VER

MainWindowState::MainWindowState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainWindowState)
}

void MainWindowState::InitAsDefaultInstance() {
}

MainWindowState::MainWindowState(const MainWindowState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainWindowState)
}

void MainWindowState::SharedCtor() {
  _cached_size_ = 0;
  xcord_ = 0;
  ycord_ = 0;
  zcord_ = 0;
  acord_ = 0;
  bcord_ = 0;
  ccord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainWindowState::~MainWindowState() {
  // @@protoc_insertion_point(destructor:MainWindowState)
  SharedDtor();
}

void MainWindowState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainWindowState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainWindowState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainWindowState_descriptor_;
}

const MainWindowState& MainWindowState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MainWindowState* MainWindowState::default_instance_ = NULL;

MainWindowState* MainWindowState::New() const {
  return new MainWindowState;
}

void MainWindowState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainWindowState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(xcord_, ccord_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainWindowState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainWindowState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double XCord = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xcord_)));
          set_has_xcord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_YCord;
        break;
      }

      // required double YCord = 2;
      case 2: {
        if (tag == 17) {
         parse_YCord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ycord_)));
          set_has_ycord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ZCord;
        break;
      }

      // required double ZCord = 3;
      case 3: {
        if (tag == 25) {
         parse_ZCord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zcord_)));
          set_has_zcord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ACord;
        break;
      }

      // required double ACord = 4;
      case 4: {
        if (tag == 33) {
         parse_ACord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acord_)));
          set_has_acord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_BCord;
        break;
      }

      // required double BCord = 5;
      case 5: {
        if (tag == 41) {
         parse_BCord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bcord_)));
          set_has_bcord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_CCord;
        break;
      }

      // required double CCord = 6;
      case 6: {
        if (tag == 49) {
         parse_CCord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ccord_)));
          set_has_ccord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainWindowState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainWindowState)
  return false;
#undef DO_
}

void MainWindowState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainWindowState)
  // required double XCord = 1;
  if (has_xcord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xcord(), output);
  }

  // required double YCord = 2;
  if (has_ycord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ycord(), output);
  }

  // required double ZCord = 3;
  if (has_zcord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->zcord(), output);
  }

  // required double ACord = 4;
  if (has_acord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acord(), output);
  }

  // required double BCord = 5;
  if (has_bcord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bcord(), output);
  }

  // required double CCord = 6;
  if (has_ccord()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ccord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MainWindowState)
}

::google::protobuf::uint8* MainWindowState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainWindowState)
  // required double XCord = 1;
  if (has_xcord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xcord(), target);
  }

  // required double YCord = 2;
  if (has_ycord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ycord(), target);
  }

  // required double ZCord = 3;
  if (has_zcord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->zcord(), target);
  }

  // required double ACord = 4;
  if (has_acord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acord(), target);
  }

  // required double BCord = 5;
  if (has_bcord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bcord(), target);
  }

  // required double CCord = 6;
  if (has_ccord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ccord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MainWindowState)
  return target;
}

int MainWindowState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double XCord = 1;
    if (has_xcord()) {
      total_size += 1 + 8;
    }

    // required double YCord = 2;
    if (has_ycord()) {
      total_size += 1 + 8;
    }

    // required double ZCord = 3;
    if (has_zcord()) {
      total_size += 1 + 8;
    }

    // required double ACord = 4;
    if (has_acord()) {
      total_size += 1 + 8;
    }

    // required double BCord = 5;
    if (has_bcord()) {
      total_size += 1 + 8;
    }

    // required double CCord = 6;
    if (has_ccord()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainWindowState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainWindowState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainWindowState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainWindowState::MergeFrom(const MainWindowState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xcord()) {
      set_xcord(from.xcord());
    }
    if (from.has_ycord()) {
      set_ycord(from.ycord());
    }
    if (from.has_zcord()) {
      set_zcord(from.zcord());
    }
    if (from.has_acord()) {
      set_acord(from.acord());
    }
    if (from.has_bcord()) {
      set_bcord(from.bcord());
    }
    if (from.has_ccord()) {
      set_ccord(from.ccord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainWindowState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainWindowState::CopyFrom(const MainWindowState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainWindowState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MainWindowState::Swap(MainWindowState* other) {
  if (other != this) {
    std::swap(xcord_, other->xcord_);
    std::swap(ycord_, other->ycord_);
    std::swap(zcord_, other->zcord_);
    std::swap(acord_, other->acord_);
    std::swap(bcord_, other->bcord_);
    std::swap(ccord_, other->ccord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainWindowState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainWindowState_descriptor_;
  metadata.reflection = MainWindowState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Telemetry::kSeqFieldNumber;
const int Telemetry::kStateFieldNumber;
#endif  // !_MSC_VER

Telemetry::Telemetry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Telemetry)
}

void Telemetry::InitAsDefaultInstance() {
  state_ = const_cast< ::MainWindowState*>(&::MainWindowState::default_instance());
}

Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Telemetry)
}

void Telemetry::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void Telemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_descriptor_;
}

const Telemetry& Telemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Telemetry* Telemetry::default_instance_ = NULL;

Telemetry* Telemetry::New() const {
  return new Telemetry;
}

void Telemetry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    seq_ = 0;
    if (has_state()) {
      if (state_ != NULL) state_->::MainWindowState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Telemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional .MainWindowState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Telemetry)
  return false;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Telemetry)
  // required int32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq(), output);
  }

  // optional .MainWindowState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Telemetry)
}

::google::protobuf::uint8* Telemetry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Telemetry)
  // required int32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq(), target);
  }

  // optional .MainWindowState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Telemetry)
  return target;
}

int Telemetry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

    // optional .MainWindowState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_state()) {
      mutable_state()->::MainWindowState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_descriptor_;
  metadata.reflection = Telemetry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
